0000              1   ; LCD_test_4bit.asm: Initializes and uses an LCD in 4-bit mode
0000              2   ; using the most common procedure found on the internet.
                  4   $LIST
0000              6   
0000              7   org 0000H
0000 0200B2       8       ljmp myprogram
0003              9   
0003             10   ; These 'equ' must match the hardware wiring
0003             11   LCD_RS equ P3.2
0003             12   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
0003             13   LCD_E  equ P3.3
0003             14   LCD_D4 equ P3.4
0003             15   LCD_D5 equ P3.5
0003             16   LCD_D6 equ P3.6
0003             17   LCD_D7 equ P3.7
0003             18   
0003             19   ; When using a 22.1184MHz crystal in fast mode
0003             20   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
0003             21   
0003             22   ;---------------------------------;
0003             23   ; Wait 40 microseconds            ;
0003             24   ;---------------------------------;
0003             25   Wait40uSec:
0003 C000        26       push AR0
0005 78B1        27       mov R0, #177
0007             28   L0:
0007 00          29       nop
0008 00          30       nop
0009 D8FC        31       djnz R0, L0 ; 1+1+3 cycles->5*45.21123ns*177=40us
000B D000        32       pop AR0
000D 22          33       ret
000E             34   
000E             35   ;---------------------------------;
000E             36   ; Wait 'R2' milliseconds          ;
000E             37   ;---------------------------------;
000E             38   WaitmilliSec:
000E C000        39       push AR0
0010 C001        40       push AR1
0012 792D        41   L3: mov R1, #45
0014 78A6        42   L2: mov R0, #166
0016 D8FE        43   L1: djnz R0, L1 ; 3 cycles->3*45.21123ns*166=22.51519us
0018 D9FA        44       djnz R1, L2 ; 22.51519us*45=1.013ms
001A DAF6        45       djnz R2, L3 ; number of millisecons to wait passed in R2
001C D001        46       pop AR1
001E D000        47       pop AR0
0020 22          48       ret
0021             49   
0021             50   ;---------------------------------;
0021             51   ; Toggles the LCD's 'E' pin       ;
0021             52   ;---------------------------------;
0021             53   LCD_pulse:
0021 D2B3        54       setb LCD_E
0023 120003      55       lcall Wait40uSec
0026 C2B3        56       clr LCD_E
0028 22          57       ret
0029             58   
0029             59   ;---------------------------------;
0029             60   ; Writes data to LCD              ;
0029             61   ;---------------------------------;
0029             62   WriteData:
0029 D2B2        63       setb LCD_RS
002B 020033      64       ljmp LCD_byte
002E             65   
002E             66   ;---------------------------------;
002E             67   ; Writes command to LCD           ;
002E             68   ;---------------------------------;
002E             69   WriteCommand:
002E C2B2        70       clr LCD_RS
0030 020033      71       ljmp LCD_byte
0033             72   
0033             73   ;---------------------------------;
0033             74   ; Writes acc to LCD in 4-bit mode ;
0033             75   ;---------------------------------;
0033             76   LCD_byte:
0033             77       ; Write high 4 bits first
0033 A2E7        78       mov c, ACC.7
0035 92B7        79       mov LCD_D7, c
0037 A2E6        80       mov c, ACC.6
0039 92B6        81       mov LCD_D6, c
003B A2E5        82       mov c, ACC.5
003D 92B5        83       mov LCD_D5, c
003F A2E4        84       mov c, ACC.4
0041 92B4        85       mov LCD_D4, c
0043 120021      86       lcall LCD_pulse
0046             87   
0046             88       ; Write low 4 bits next
0046 A2E3        89       mov c, ACC.3
0048 92B7        90       mov LCD_D7, c
004A A2E2        91       mov c, ACC.2
004C 92B6        92       mov LCD_D6, c
004E A2E1        93       mov c, ACC.1
0050 92B5        94       mov LCD_D5, c
0052 A2E0        95       mov c, ACC.0
0054 92B4        96       mov LCD_D4, c
0056 120021      97       lcall LCD_pulse
0059 22          98       ret
005A             99   
005A            100   ;---------------------------------;
005A            101   ; Configure LCD in 4-bit mode     ;
005A            102   ;---------------------------------;
005A            103   LCD_4BIT:
005A C2B3       104       clr LCD_E   ; Resting state of LCD's enable is zero
005C            105       ; clr LCD_RW  ; Not used, pin tied to GND
005C            106   
005C            107       ; After power on, wait for the LCD start up time before initializing
005C            108       ; NOTE: the preprogrammed power-on delay of 16 ms on the AT89LP51RC2
005C            109       ; seems to be enough.  That is why these two lines are commented out.
005C            110       ; Also, commenting these two lines improves simulation time in Multisim.
005C            111       ; mov R2, #40
005C            112       ; lcall WaitmilliSec
005C            113   
005C            114       ; First make sure the LCD is in 8-bit mode and then change to 4-bit mode
005C 7433       115       mov a, #0x33
005E 12002E     116       lcall WriteCommand
0061 7433       117       mov a, #0x33
0063 12002E     118       lcall WriteCommand
0066 7432       119       mov a, #0x32 ; change to 4-bit mode
0068 12002E     120       lcall WriteCommand
006B            121   
006B            122       ; Configure the LCD
006B 7428       123       mov a, #0x28
006D 12002E     124       lcall WriteCommand
0070 740C       125       mov a, #0x0c
0072 12002E     126       lcall WriteCommand
0075 7401       127       mov a, #0x01 ;  Clear screen command (takes some time)
0077 12002E     128       lcall WriteCommand
007A            129   
007A            130       ;Wait for clear screen command to finish. Usually takes 1.52ms.
007A 7A02       131       mov R2, #2
007C 12000E     132       lcall WaitmilliSec
007F 22         133       ret
0080            134       
0080            135       
0080 4E69636B   136   MyName: db 'Nick Vo', 0 ; zero terminated string
     20566F00
0088 31313035   137   MyStdn: db '11056892', 0
     36383932
     00
0091 20202020   138   Blank: db '        ', 0
     20202020
     00
009A            139   
009A            140   ; movc from https://www.pjrc.com/tech/8051/board5/lcd_example.asm
009A            141   ; send each characters to lcd and return when reach null
009A            142   SendString:
009A E4         143            clr     a
009B 93         144            movc    a, @a+dptr
009C A3         145            inc     dptr
009D 6005       146            jz      SendString_end
009F 120029     147            lcall WriteData
00A2 80F6       148            sjmp SendString
00A4            149   SendString_end:
00A4 22         150            ret
00A5            151   ; from blinky
00A5            152   WaitTwoSec:
00A5            153       ; 6MHz clock has 1/6Mhz = 166.66ns per cycle
00A5 7A64       154        mov R2, #100
00A7 79FA       155   L_3: mov R1, #250
00A9 7878       156   L_2: mov R0, #120
00AB D8FE       157   L_1: djnz R0, L_1 ; 4 machine cycles -> 4*166.666ns*120=80us
00AD D9FA       158        djnz R1, L_2 ; 80us*250 = 0.02s
00AF DAF6       159        djnz R2, L_3 ; 0.02s*100 = 2s
00B1 22         160        ret
00B2            161   ;---------------------------------;
00B2            162   ; Main loop.  Initialize stack,   ;
00B2            163   ; ports, LCD, and displays        ;
00B2            164   ; letters on the LCD              ;
00B2            165   ;---------------------------------;
00B2            166   myprogram:
00B2 75817F     167       mov SP, #7FH
00B5 12005A     168       lcall LCD_4BIT
00B8            169   
00B8            170       ;mov a, #0x80 ; Move cursor to line 1 column 1
00B8            171       ;lcall WriteCommand
00B8            172       ;mov dptr, #MyName
00B8            173       ;lcall SendString
00B8            174       
00B8            175       ;mov a, #0xC0 ; Move cursor to line 2 column 0
00B8            176       ;lcall WriteCommand
00B8            177       ;mov dptr, #MyStdn
00B8            178       ;lcall SendString
00B8            179   forever:
00B8            180   ; basically a clockwise rotation of my name and student id with a period of 2s
00B8            181   ; around 4 quadrants of the lcd
00B8            182   ; since both my name and student id are less or equal to 8 characters wide 
00B8            183   ; and the lcd is 16 characters wide, I'm able to perform such maneuover
00B8 1200A5     184       lcall WaitTwoSec
00BB            185            
00BB 7480       186       mov a, #0x80 ; Move cursor to line 1 column 0
00BD 12002E     187       lcall WriteCommand
00C0 900080     188       mov dptr, #MyName
00C3 12009A     189       lcall SendString
00C6            190       
00C6 74C0       191       mov a, #0xC0 ; Move cursor to line 2 column 0
00C8 12002E     192       lcall WriteCommand
00CB 900088     193       mov dptr, #MyStdn
00CE 12009A     194       lcall SendString
00D1            195       
00D1 74C8       196       mov a, #0xC8 ; Move cursor to line 2 column 9
00D3 12002E     197       lcall WriteCommand
00D6 900091     198       mov dptr, #Blank
00D9 12009A     199       lcall SendString
00DC            200       
00DC 1200A5     201            lcall WaitTwoSec
00DF            202            
00DF 7488       203            mov a, #0x88 ; Move cursor to line 1 column 9
00E1 12002E     204       lcall WriteCommand
00E4 900080     205       mov dptr, #MyName
00E7 12009A     206       lcall SendString
00EA            207       
00EA 7480       208       mov a, #0x80 ; Move cursor to line 1 column 0
00EC 12002E     209       lcall WriteCommand
00EF 900088     210       mov dptr, #MyStdn
00F2 12009A     211       lcall SendString
00F5            212       
00F5 74C0       213       mov a, #0xC0 ; Move cursor to line 2 column 0
00F7 12002E     214       lcall WriteCommand
00FA 900091     215       mov dptr, #Blank
00FD 12009A     216       lcall SendString
0100            217            
0100 1200A5     218            lcall WaitTwoSec
0103            219            
0103 74C8       220            mov a, #0xC8 ; Move cursor to line 2 column 9
0105 12002E     221       lcall WriteCommand
0108 900080     222       mov dptr, #MyName
010B 12009A     223       lcall SendString
010E            224       
010E 7488       225       mov a, #0x88 ; Move cursor to line 1 column 9
0110 12002E     226       lcall WriteCommand
0113 900088     227       mov dptr, #MyStdn
0116 12009A     228       lcall SendString
0119            229       
0119 7480       230       mov a, #0x80 ; Move cursor to line 1 column 0
011B 12002E     231       lcall WriteCommand
011E 900091     232       mov dptr, #Blank
0121 12009A     233       lcall SendString
0124            234       
0124 1200A5     235       lcall WaitTwoSec
0127            236            
0127 74C0       237            mov a, #0xC0 ; Move cursor to line 2 column 1
0129 12002E     238       lcall WriteCommand
012C 900080     239       mov dptr, #MyName
012F 12009A     240       lcall SendString
0132            241       
0132 74C8       242       mov a, #0xC8 ; Move cursor to line 2 column 9
0134 12002E     243       lcall WriteCommand
0137 900088     244       mov dptr, #MyStdn
013A 12009A     245       lcall SendString
013D            246       
013D 7488       247       mov a, #0x88 ; Move cursor to line 1 column 9
013F 12002E     248       lcall WriteCommand
0142 900091     249       mov dptr, #Blank
0145 12009A     250       lcall SendString
0148            251       
0148 0200B8     252       ljmp forever
014B            253   END
